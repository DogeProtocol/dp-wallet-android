/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package command-line-arguments */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */




/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif


/* Return type for Scrypt */
struct Scrypt_return {
	char* r0;
	char* r1;
};
extern struct Scrypt_return Scrypt(char* skKeyStr, char* saltStr, GoInt skCount);

/* Return type for PublicKeyToAddress */
struct PublicKeyToAddress_return {
	char* r0;
	char* r1;
};
extern struct PublicKeyToAddress_return PublicKeyToAddress(char* pKeyStr, GoInt pkCount);

/* Return type for IsValidAddress */
struct IsValidAddress_return {
	char* r0;
	char* r1;
};
extern struct IsValidAddress_return IsValidAddress(char* addressStr);

/* Return type for TxnSigningHash */
struct TxnSigningHash_return {
	char* r0;
	char* r1;
};
extern struct TxnSigningHash_return TxnSigningHash(char* from, char* nonce, char* to, char* value, char* gasLimit, char* data, char* chainId);

/* Return type for TxHash */
struct TxHash_return {
	char* r0;
	char* r1;
};
extern struct TxHash_return TxHash(char* from, char* nonce, char* to, char* value, char* gasLimit, char* data, char* chainId, char* pKeyStr, char* sigStr, GoInt pkCount, GoInt sigCount);

/* Return type for TxData */
struct TxData_return {
	char* r0;
	char* r1;
};
extern struct TxData_return TxData(char* from, char* nonce, char* to, char* value, char* gasLimit, char* data, char* chainId, char* pKeyStr, char* sigStr, GoInt pkCount, GoInt sigCount);

/* Return type for ContractData */
struct ContractData_return {
	char* r0;
	char* r1;
};
extern struct ContractData_return ContractData(char** args, GoInt argvLength);

/* Return type for ParseBigFloat */
struct ParseBigFloat_return {
	char* r0;
	char* r1;
};
extern struct ParseBigFloat_return ParseBigFloat(char* value);

/* Return type for ParseBigFloatInner */
struct ParseBigFloatInner_return {
	char* r0;
	char* r1;
};
extern struct ParseBigFloatInner_return ParseBigFloatInner(char* value);

/* Return type for WeiToEther */
struct WeiToEther_return {
	char* r0;
	char* r1;
};
extern struct WeiToEther_return WeiToEther(char* wei);

/* Return type for EtherToWeiFloat */
struct EtherToWeiFloat_return {
	char* r0;
	char* r1;
};
extern struct EtherToWeiFloat_return EtherToWeiFloat(char* ethVal);

#ifdef __cplusplus
}
#endif
