/*
 * Accounts Read Data Plane
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dpwallet.app.api.read.api;

import com.dpwallet.app.api.read.ApiCallback;
import com.dpwallet.app.api.read.ApiClient;
import com.dpwallet.app.api.read.ApiException;
import com.dpwallet.app.api.read.ApiResponse;
import com.dpwallet.app.api.read.Configuration;
import com.dpwallet.app.api.read.Pair;
import com.dpwallet.app.api.read.ProgressRequestBody;
import com.dpwallet.app.api.read.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.dpwallet.app.api.read.model.AccountPendingTransactionSummaryResponse;
import com.dpwallet.app.api.read.model.AccountTransactionSummaryResponse;
import com.dpwallet.app.api.read.model.BalanceResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccountsApi {
    private ApiClient apiClient;

    public AccountsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccountsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getAccountBalance
     * @param address the string representing the address (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getAccountBalanceCall(String address, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api/accounts/{address}/balance"
            .replaceAll("\\{" + "address" + "\\}", apiClient.escapeString(address.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.setHttpClient(apiClient.getHttpClient().newBuilder().addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            }).build());
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountBalanceValidateBeforeCall(String address, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling getAccountBalance(Async)");
        }
        

        okhttp3.Call call = getAccountBalanceCall(address, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get account balance
     * 
     * @param address the string representing the address (required)
     * @return BalanceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public BalanceResponse getAccountBalance(String address) throws ApiException {
        ApiResponse<BalanceResponse> resp = getAccountBalanceWithHttpInfo(address);
        return resp.getData();
    }

    /**
     * Get account balance
     * 
     * @param address the string representing the address (required)
     * @return ApiResponse&lt;BalanceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<BalanceResponse> getAccountBalanceWithHttpInfo(String address) throws ApiException {
        okhttp3.Call call = getAccountBalanceValidateBeforeCall(address, null, null);
        Type localVarReturnType = new TypeToken<BalanceResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get account balance (asynchronously)
     * 
     * @param address the string representing the address (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getAccountBalanceAsync(String address, final ApiCallback<BalanceResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getAccountBalanceValidateBeforeCall(address, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<BalanceResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listAccountPendingTransactions
     * @param address the string representing the address (required)
     * @param pageIndex the interger representing page number (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call listAccountPendingTransactionsCall(String address, Integer pageIndex, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api/accounts/{address}/pending/txn/page/{pageIndex}"
            .replaceAll("\\{" + "address" + "\\}", apiClient.escapeString(address.toString()))
            .replaceAll("\\{" + "pageIndex" + "\\}", apiClient.escapeString(pageIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.setHttpClient(apiClient.getHttpClient().newBuilder().addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            }).build());
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAccountPendingTransactionsValidateBeforeCall(String address, Integer pageIndex, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling listAccountPendingTransactions(Async)");
        }
        
        // verify the required parameter 'pageIndex' is set
        if (pageIndex == null) {
            throw new ApiException("Missing the required parameter 'pageIndex' when calling listAccountPendingTransactions(Async)");
        }
        

        okhttp3.Call call = listAccountPendingTransactionsCall(address, pageIndex, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List account pending transactions info by page
     * 
     * @param address the string representing the address (required)
     * @param pageIndex the interger representing page number (required)
     * @return AccountPendingTransactionSummaryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccountPendingTransactionSummaryResponse listAccountPendingTransactions(String address, Integer pageIndex) throws ApiException {
        ApiResponse<AccountPendingTransactionSummaryResponse> resp = listAccountPendingTransactionsWithHttpInfo(address, pageIndex);
        return resp.getData();
    }

    /**
     * List account pending transactions info by page
     * 
     * @param address the string representing the address (required)
     * @param pageIndex the interger representing page number (required)
     * @return ApiResponse&lt;AccountPendingTransactionSummaryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccountPendingTransactionSummaryResponse> listAccountPendingTransactionsWithHttpInfo(String address, Integer pageIndex) throws ApiException {
        okhttp3.Call call = listAccountPendingTransactionsValidateBeforeCall(address, pageIndex, null, null);
        Type localVarReturnType = new TypeToken<AccountPendingTransactionSummaryResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List account pending transactions info by page (asynchronously)
     * 
     * @param address the string representing the address (required)
     * @param pageIndex the interger representing page number (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call listAccountPendingTransactionsAsync(String address, Integer pageIndex, final ApiCallback<AccountPendingTransactionSummaryResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = listAccountPendingTransactionsValidateBeforeCall(address, pageIndex, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccountPendingTransactionSummaryResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for listAccountTransactions
     * @param address the string representing the address (required)
     * @param pageIndex the interger representing page number (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call listAccountTransactionsCall(String address, Integer pageIndex, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/api/accounts/{address}/txn/page/{pageIndex}"
            .replaceAll("\\{" + "address" + "\\}", apiClient.escapeString(address.toString()))
            .replaceAll("\\{" + "pageIndex" + "\\}", apiClient.escapeString(pageIndex.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.setHttpClient(apiClient.getHttpClient().newBuilder().addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            }).build());
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAccountTransactionsValidateBeforeCall(String address, Integer pageIndex, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'address' is set
        if (address == null) {
            throw new ApiException("Missing the required parameter 'address' when calling listAccountTransactions(Async)");
        }
        
        // verify the required parameter 'pageIndex' is set
        if (pageIndex == null) {
            throw new ApiException("Missing the required parameter 'pageIndex' when calling listAccountTransactions(Async)");
        }
        

        okhttp3.Call call = listAccountTransactionsCall(address, pageIndex, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List account transactions info by page
     * 
     * @param address the string representing the address (required)
     * @param pageIndex the interger representing page number (required)
     * @return AccountTransactionSummaryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public AccountTransactionSummaryResponse listAccountTransactions(String address, Integer pageIndex) throws ApiException {
        ApiResponse<AccountTransactionSummaryResponse> resp = listAccountTransactionsWithHttpInfo(address, pageIndex);
        return resp.getData();
    }

    /**
     * List account transactions info by page
     * 
     * @param address the string representing the address (required)
     * @param pageIndex the interger representing page number (required)
     * @return ApiResponse&lt;AccountTransactionSummaryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<AccountTransactionSummaryResponse> listAccountTransactionsWithHttpInfo(String address, Integer pageIndex) throws ApiException {
        okhttp3.Call call = listAccountTransactionsValidateBeforeCall(address, pageIndex, null, null);
        Type localVarReturnType = new TypeToken<AccountTransactionSummaryResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List account transactions info by page (asynchronously)
     * 
     * @param address the string representing the address (required)
     * @param pageIndex the interger representing page number (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call listAccountTransactionsAsync(String address, Integer pageIndex, final ApiCallback<AccountTransactionSummaryResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = listAccountTransactionsValidateBeforeCall(address, pageIndex, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<AccountTransactionSummaryResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
